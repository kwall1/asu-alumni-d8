<?php
/**
 * @file
 * New Sharing Module.
 */

use Drupal\sharemessage\Entity\ShareMessage;

/**
 * Checks whether a machine name already exists.
 *
 * @param mixed $value
 *   The ID of the entity to load.
 *
 * @return bool
 *   TRUE if Share Message with given name exists, FALSE otherwise.
 */
function sharemessage_check_machine_name_if_exist($value) {
  return \Drupal::entityTypeManager()->getStorage('sharemessage')->load($value);
}

/**
 * Implements hook_libraries_info().
 */
function sharemessage_libraries_info() {
  $libraries = array(
    'sharrre' => array(
      'name' => 'Sharrre',
      'vendor url' => 'http://sharrre.com',
      'download url' => 'http://sharrre.com/#download',
      'version arguments' => array(
        'file' => 'jquery.sharrre.min.js',
        'pattern' => '/Version: (.*)/',
        'lines' => 5,
      ),
      'files' => array(
        'js' => array(
          'jquery.sharrre.min.js' => array(),
        ),
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_library_info_alter().
 */
function sharemessage_library_info_alter(&$libraries, $extension) {
  if ($extension != 'sharemessage') {
    return;
  }
  // Add the profile id to the URL if present.
  $profile_id = \Drupal::config('sharemessage.addthis')->get('addthis_profile_id');
  if ($profile_id) {
    $libraries['addthis']['js']['//s7.addthis.com/js/300/addthis_widget.js##pubid=' . $profile_id] = $libraries['addthis']['js']['//s7.addthis.com/js/300/addthis_widget.js'];
    unset($libraries['addthis']['js']['//s7.addthis.com/js/300/addthis_widget.js']);
  }

  // Get the correct path of the Sharrre js file (the user needs to manually
  // put the jquery.sharrre.min.js in libraries/sharrre folder or set the url
  // in the settings).
  $config = \Drupal::config('sharemessage.sharrre');
  if ($library_url = $config->get('library_url')) {
    // Cloud hosted player, use external JavaScript.
    $libraries['sharrre']['js'][$library_url] = array(
      'type' => 'external',
    );
  }
  elseif (\Drupal::moduleHandler()->moduleExists('libraries')) {
    $info = libraries_detect('sharrre');
    $libraries['sharrre'] += array(
      'version' => $info['installed'] ? $info['version'] : 'web-hosted',
    );
    if ($info['installed']) {
      // Because the library is self hosted, use files from library definition.
      if (!empty($info['files']['js'])) {
        foreach ($info['files']['js'] as $data => $option) {

          if (is_numeric($data)) {
            $option = "/{$info['library path']}/{$option}";
          }
          elseif (empty($option['type']) || $option['type'] == 'file') {
            $data = "/{$info['library path']}/{$data}";
          }

          $libraries['sharrre']['js'][$data] = $option;
        }
      }
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function sharemessage_page_attachments(&$page) {
  $smid = \Drupal::request()->query->get('smid');
  $page['#cache']['contexts'][] = 'url.query_args:smid';
  $config = \Drupal::config('sharemessage.addthis');
  \Drupal::service('renderer')->addCacheableDependency($page, $config);
  if (!empty($smid) && \Drupal::config('sharemessage.settings')->get('message_enforcement')) {
    /** @var \Drupal\sharemessage\ShareMessageInterface $sharemessage */
    $sharemessage = ShareMessage::load($smid);
    if ($sharemessage) {
      \Drupal::service('renderer')->addCacheableDependency($page, $sharemessage);
      foreach ($sharemessage->buildOGTags($sharemessage->getContext()) as $tag) {
        $page['#attached']['html_head'][] = [
          $tag,
          str_replace(':', '_', $tag['#attributes']['property']),
        ];
      }
    }
  }
}

/**
 * Load AddThis services.
 */
function sharemessage_get_addthis_services() {
  $options = &drupal_static(__FUNCTION__);

  if (!isset($options)) {
    if ($cache = \Drupal::cache()->get('sharemessage_addthis_services:' . \Drupal::languageManager()->getCurrentLanguage()->getId())) {
      $options = $cache->data;
    }
    else {
      $json = addthis_get_services_json();
      $output = json_decode($json);
      if (!empty($output)) {
        $options = array((string)t('Common') => array(), (string) t('Mail') => array(), (string) t('Other') => array());
        foreach ($output->data as $service) {
          if (in_array($service->code, array('facebook', 'facebook_like', 'twitter', 'xing', 'linkedin', 'wordpress', 'google_plusone_share'))) {
            $options[(string) t('Common')][$service->code] = $service->name;
          }
          elseif (in_array($service->code, array('mail', 'gmail', 'yahoomail', 'aolmail', 'email', 'mailto'))) {
            $options[(string) t('Mail')][$service->code] = $service->name;
          }
          else {
            $options[(string) t('Other')][$service->code] = $service->name;
          }
        }
        // Tweet is not defined?
        $options[(string) t('Common')]['tweet'] = t('Tweet');
        // Neither is Pinterest Follow.
        $options[(string) t('Common')]['pinterest_follow'] = t('Pinterest follow');
        \Drupal::cache()->set('sharemessage_addthis_services:' . \Drupal::languageManager()->getCurrentLanguage()->getId(), $options);
      }
      else {
        \Drupal::cache()->delete('sharemessage_addthis_services:' . \Drupal::languageManager()->getCurrentLanguage()->getId());
      }
    }
  }

  return $options;
}

/**
 * Getter for the AddThis services definitions.
 *
 * If option is set the local file within the module folder will be read instead
 * of the file that is hosted on the AddThis cdn.
 *
 * @return string
 *   The path to the services definition file.
 */
function addthis_get_services_json() {
  if (\Drupal::config('sharemessage.addthis')->get('local_services_definition')) {
    $file_uri = drupal_get_path('module', 'sharemessage') . '/addthis/sharing.en.json';
  }
  else {
    $file_uri = 'http://cache.addthiscdn.com/services/v1/sharing.en.json';
  }
  return file_get_contents($file_uri);
}

/**
* Implements hook_theme().
*/
function sharemessage_theme() {
  return array(
    'sharemessage_addthis' => array(
      'variables' => array(
        'entity' => NULL,
        'services' => array(),
        'additional_services' => FALSE,
        'counter' => FALSE,
        'attributes' => array(),
        'twitter_template' => NULL,
      ),
    ),
    'sharemessage_sharrre' => array(
      'variables' => array(
        'services' => array(),
        'enable_hover' => TRUE,
        'enable_counter' => TRUE,
        'enable_tracking' => TRUE,
        'shorter_total' => TRUE,
        'attributes' => array(),
        'id' => 'test',
      ),
    ),
  );
}
